from numpy import *

arr=array([1,2,3,4])
print(arr)

o/p:
[1,2,3,4]
------------------------------
way of creating arrays using numpy:

1) array()

from numpy import *

arr=array([1,2,3,4,5])
print(arr.dtype)
print(arr)

o/p:

int32
[1 2 3 4 5]
--------------
from numpy import *

arr=array([1,2,3,4,5.0])
print(arr.dtype)
print(arr)

o/p:
float64
[1. 2. 3. 4. 5.]

or 

from numpy import *

arr=array([1,2,3,4,5.0],float)
print(arr.dtype)
print(arr)

o/p:
float64
[1. 2. 3. 4. 5.]
==========================
2) linespace()

from numpy import *

arr=linspace(0,10,11)   -- we are dividing parts s it will come float

print(arr)

o/p:

[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]
------------------
3) arange()

from numpy import *

arr=arange(1,10,2)
print(arr)

o/p:

[1 3 5 7 9]
------------------
4) logspace()

from numpy import *

arr=logspace(1,40,5)
print(arr)

o/p:

[1.00000000e+01 5.62341325e+10 3.16227766e+20 1.77827941e+30
 1.00000000e+40]

or

from numpy import *

arr=logspace(1,40,5)
print('%.2f' %arr[4])

o/p:
10000000000000000303786028427003666890752.00
--------------------------
5) zeros()

from numpy import *

arr=zeros(5,int)
print(arr)

o/p:
[0 0 0 0 0]
--------------------------
6) ones()

from numpy import *

arr=ones(5,int)
print(arr)

o/p:
[1 1 1 1 1]
----------------------------
from numpy import *

arr=array([1,2,5,4,3])
print(max(arr))

o/p:
5
---------------------------
from numpy import *

arr1=array([1,2,5,4,3])
arr2 = arr1
print(arr1)
print(arr2)

o/p:

[1 2 5 4 3]
[1 2 5 4 3]
------------------------
from numpy import *

arr1=array([1,2,5,4,3])
arr2 = arr1
print(arr1)
print(arr2)

print(id(arr1))
print(id(arr2))

o/p:

[1 2 5 4 3]
[1 2 5 4 3]
2645984767888
2645984767888

same address is called aliasing.
--------------------------
if we want f address:
from numpy import *

arr1=array([1,2,5,4,3])
arr2 = arr1.view()   -- here view() is to change memory locations
print(arr1)
print(arr2)

print(id(arr1))
print(id(arr2))

o/p:
[1 2 5 4 3]
[1 2 5 4 3]
1941800120208
1941801322032

but we are copying and they are two types 
1) shallow copy
2) deep copy
----------------------------
1) shallow copy

change the value:

from numpy import *

arr1=array([1,2,5,4,3])
arr2 = arr1.view()
arr1[1]=7
print(arr1)
print(arr2)

print(id(arr1))
print(id(arr2))

o/p:
[1 7 5 4 3]
[1 7 5 4 3]   ---- here both arr1 and arr2 are changed 
2352396005264
2352397207088

2) deep copy:

from numpy import *

arr1=array([1,2,5,4,3])
arr2 = arr1.copy()  -- copy() refers to deep copy
arr1[1]=7
print(arr1)
print(arr2)

print(id(arr1))
print(id(arr2))

o/p:
[1 7 5 4 3]
[1 2 5 4 3]
1781868294032
1781869495856
-------------------------------














































