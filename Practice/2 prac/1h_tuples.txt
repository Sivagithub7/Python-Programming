tpl=(20,30,20,'xyz')
print(type(tpl))
print(tpl*3)
print(tpl.count(20))
print(tpl.index('xyz'))

o/p:

<class 'tuple'>
(20, 30, 20, 'xyz', 20, 30, 20, 'xyz', 20, 30, 20, 'xyz')
2
3
------------------------------
list to tuple:

lst=[20,30,20,'xyz']
print(type(lst))
tp1=tuple(lst)
print(type(tp1))
print(type(lst))

o/p:

<class 'list'>
<class 'tuple'>
<class 'list'>
================================
#1
Tuples:-
Tuple is almost similar to a list in which we can store multiple values.
- Tuples are Immutable and we can change values in them.
- To define a tuple, () round brackets are used.
- We can fetch the values from a tuple using the index value that can be given in a square bracket.
- Tuple will give an error when you tried to change a value in it.

#2
- count method is used to count the occurrences of an element in a tuple. It counts the number of times that an element is present in a tuple.
e.g., If an element of value 5 is present two times in a tuple, then the count method returns 2.

#3
 - We can use tuples when we want a list of multiple values but we do not want to change it.
- Iteration in the tuple is faster than the list.

#4
Sets:-
- Set is a collection of unique elements.
- To define the set, we use the {} curly brackets.
- Set never follows the sequence.
- When we print the set, then the sequence of values in output will be different from the sequence of input.
- Duplicate values present in a set will be printed only once in an output.
- Set uses the concept of Hash. Hash is used to improve the performance as it fetches the values as fast as possible.
- Indexing is not supported in sets as it does not follow sequencing.
- Values can not be changed in a set also because index value is not supported.

-------------------------------
Content Copyright by Pierian Data
Tuples
In Python tuples are very similar to lists, however, unlike lists they are immutable meaning they can not be changed. You would use tuples to present things that shouldn't be changed, such as days of the week, or dates on a calendar.

In this section, we will get a brief overview of the following:

1.) Constructing Tuples
2.) Basic Tuple Methods
3.) Immutability
4.) When to Use Tuples
You'll have an intuition of how to use tuples based on what you've learned about lists. We can treat them very similarly with the major distinction being that tuples are immutable.

Constructing Tuples
The construction of a tuples use () with elements separated by commas. For example:

# Create a tuple
t = (1,2,3)
# Check len just like a list
len(t)
3
# Can also mix object types
t = ('one',2)

# Show
t
('one', 2)
# Use indexing just like we did in lists
t[0]
'one'
# Slicing just like a list
t[-1]
2
Basic Tuple Methods
Tuples have built-in methods, but not as many as lists do. Let's look at two of them:

# Use .index to enter a value and return the index
t.index('one')
0
# Use .count to count the number of times a value appears
t.count('one')
1
Immutability
It can't be stressed enough that tuples are immutable. To drive that point home:

t[0]= 'change'
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-8-1257c0aa9edd> in <module>()
----> 1 t[0]= 'change'

TypeError: 'tuple' object does not support item assignment
Because of this immutability, tuples can't grow. Once a tuple is made we can not add to it.

t.append('nope')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-9-b75f5b09ac19> in <module>()
----> 1 t.append('nope')

AttributeError: 'tuple' object has no attribute 'append'
When to use Tuples
You may be wondering, "Why bother using tuples when they have fewer available methods?" To be honest, tuples are not used as often as lists in programming, but are used when immutability is necessary. If in your program you are passing around an object and need to make sure it does not get changed, then a tuple becomes your solution. It provides a convenient source of data integrity.

You should now be able to create and use tuples in your programming as well as have an understanding of their immutability.

Up next Files!



In tuple there is no methods like list.

a=(4,2,3.5, "var", True, "char", 2) print(a[-2])

o/p: char

concatination

a=(4,2,9) b=(5,3,7)

print(a+b)

o/p:

(4, 2, 9, 5, 3, 7)

a=(4,2,9) b=(5,3,7)

print(a*2)

o/p:

(4, 2, 9, 4, 2, 9)

Iteration:

a=(4,2,9)

for i in a:
print(i)

o/p:

4

2

9

Membership in and not in

in:

a=(4,2,9)

print(4 in a)

o/p:

True

not in:

a=(4,2,9)

print(4 not in a)

o/p:

False

==
