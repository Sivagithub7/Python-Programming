mylist=[1,,2,2,2,2,3,3,3]
mylist
{1,2,3}---it removes unique values
===================

{}

not allow duplicates

no index, unordered

mutable

methods:

add()

update()

pop()

remove()

Operations:

Union()

Intersection()

difference()

is subset()

is superset()

add()

a= {5,8,4,15,23}

a.add(0)

print(a)

o/p:

10, 4, 5, 23, 8, 15}

update()

a= (5,8,4,15,23)

6a_dictionary

5a_tuple

a.update((35,45,55,3.7))

print(a)

o/p:

(35, 4, 5, 3.7, 8, 45, 15, 55, 23)

pop() here it will delete random num

a= {5,8,4,15,23}

a.pop()

print(a)

o/p: 5, 23, 8, 15)

remove() here we can give element that needs to be deleted

a= 5,8,4,15,23)

a.remove(5)

print(a)

o/p: 14, 23, 8, 15}

Operations:

union() no duplicates and add all elements

set1-{1,2,3,4,5} set2={4,5,6,7,8)
print(set1.union(set2))

o/p: 1, 2, 3, 4, 5, 6, 7, 8}

intersection() -- only similar

set1={1,2,3,4,5} set2={4,5,6,7,8) print(set1.intersection (set2))

o/p:

{4, 5}

=

difference() shows only diff, no duplicates

set1={1,2,3,4,5} set2={4,5,6,7,8}

print(set1.difference (set2))

o/p:

{1, 2, 3}

set1={1,2,3,4,5)

set2=14,5,6,7,8)

print(set2.difference (set1))

o/p:
{8, 6, 7}

issubset:

set1={1,2,3,4,5}

set2={3,4}

print(set2.issubset(set1))

o/p:

True

set1={1,2,3,4,5}

set2={3,4,9}

print(set2.issubset(set1))

o/p:

False

issuperset:

set1={1,2,3,4,5}

set2={3,4}

print(set2.issuperset(set1))

o/p:

False
-----------

Frozen set: mutable data type to immutable

f=(1,2,3,4,5)

f.add(6)

print(f)

o/p: false

====================
set={10,20,30,20,'xy'}
print(set)

o/p:
{10, 20, 30, 'xy'}
-----------------------------
set={10,20,30,20,'xy'}
print(set)
set.remove(20)

o/p:

{10, 20, 'xy', 30}
--------------------------
set={10,20,30,20,'xy'}
print(set.index(2))
print(set*2)

o/p:

    print(set.index(2))
AttributeError: 'set' object has no attribute 'index'
note: not supports the index and * values in set.

----------------------------
Frogen set:

set={10,20,30,20,'xy'}
print(set)

f=frozenset(set)
f.remove(30)

o/p:
{10, 'xy', 20, 30}

    f.remove(30)
AttributeError: 'frozenset' object has no attribute 'remove'
=====================================
bytes and bytearray: here also indexing and * not worked

lst=[20,30,40,234]
print(type(lst))
b=bytes(lst)
print(type(b))
b[2]=22


    b[2]=22
TypeError: 'bytes' object does not support item assignment
<class 'list'>
<class 'bytes'>

soo

lst=[20,30,40,234]
print(type(lst))
b=bytes(lst)
print(type(b))
# b[2]=22

b1=bytearray(lst)
print(type(b1))
b1[2]=33

o/p:

<class 'list'>
<class 'bytes'>
<class 'bytearray'>
-----------------------------------


==============================
Set and Booleans
There are two other object types in Python that we should quickly cover: Sets and Booleans.

Sets
Sets are an unordered collection of unique elements. We can construct them by using the set() function. Let's go ahead and make a set to see how it works

x = set()
# We add to sets with the add() method
x.add(1)
#Show
x
{1}
Note the curly brackets. This does not indicate a dictionary! Although you can draw analogies as a set being a dictionary with only keys.

We know that a set has only unique entries. So what happens when we try to add something that is already in a set?

# Add a different element
x.add(2)
#Show
x
{1, 2}
# Try to add the same element
x.add(1)
#Show
x
{1, 2}
Notice how it won't place another 1 there. That's because a set is only concerned with unique elements! We can cast a list with multiple repeat elements to a set to get the unique elements. For example:

# Create a list with repeats
list1 = [1,1,2,2,3,4,5,6,1,1]
# Cast as set to get unique values
set(list1)
{1, 2, 3, 4, 5, 6}
Booleans
Python comes with Booleans (with predefined True and False displays that are basically just the integers 1 and 0). It also has a placeholder object called None. Let's walk through a few quick examples of Booleans (we will dive deeper into them later in this course).

# Set object to be a boolean
a = True
#Show
a
True
We can also use comparison operators to create booleans. We will go over all the comparison operators later on in the course.

# Output is boolean
1 > 2
False
We can use None as a placeholder for an object that we don't want to reassign yet:

# None placeholder
b = None
# Show
print(b)
None
Thats it! You should now have a basic understanding of Python objects and data structure types. Next, go ahead and do the assessment test!
