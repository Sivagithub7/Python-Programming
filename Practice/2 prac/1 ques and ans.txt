Resources for More Basic Practice
Before you begin your assessment, I wanted to point out some helpful links for practice (don't worry about being able to do these exercises, I just want you to be aware of the links so you can visit them later, since we still haven't discussed functions, you won't be able to utilize a lot of these resources yet!):

Basic Practice:

http://codingbat.com/python

More Mathematical (and Harder) Practice:

https://projecteuler.net/archives

List of Practice Problems:

http://www.codeabbey.com/index/task_list

A SubReddit Devoted to Daily Practice Problems:

https://www.reddit.com/r/dailyprogrammer

A very tricky website with very few hints and touch problems (Not for beginners but still interesting)

http://www.pythonchallenge.com/
=================================================
strings: ordered sequence of characters
lists: ordered seq of obj (mutable)
tuples: ordered seq of obj (immutable0
dictionary: ket value pairing that is unordered
------------------------------------- 
Numbers FAQ 

1. What's the difference between floating point and an integer?

An integer has no decimals in it, a floating point number can display digits past the decimal point.

2. Why doesn't 0.1+0.2-0.3 equal 0.0 ?

This has to do with floating point accuracy and computer's abilities to represent numbers in memory

---------
>>
In Python 3, what is the output of 1/2 ?

0.5

============================================
Strings FAQ

1. Are strings mutable?

Strings are not mutable! (meaning you can't use indexing to change individual elements of a string)

2. How do I create comments in my code?

You can use the hashtag # to create comments in your code
======================================
Lists:

Question 1:
If lst=[0,1,2] what is the result of lst.pop()

sol:2

Question 2:
Lists can have multiple object types.

sol: true

Question 3:
If lst=['a','b','c'] What is the result of lst[1:]?

sol: ['b','c']
-----------------------------------
Dictionary:
Question 1:
is this statement True or False? Dictionaries retain order and are a sequence.

sol: false

Question 2:
Given d={'k1':[1,2,3]}

What is the output of d['k1'][1]

a) 2

Question 3:
Is this statement True or False? Dictionaries are immutable.

Choose the answer below.

false
============================
Tuples:

Tuples have a lot of methods associated with them.
false

=============================
sets and Booleans
Question 2:
How do you add an element to a set?

.add()

Question 3:
What is the result of:

set([1,1,2,3])

ans:{1,2,3}
==============================


Content Copyright by Pierian Data
Objects and Data Structures Assessment Test
Test your knowledge.
** Answer the following questions **

Write a brief description of all the following Object Types and Data Structures we've learned about:

For the full answers, review the Jupyter notebook introductions of each topic!

Numbers

Strings

Lists

Tuples

Dictionaries

Numbers
Write an equation that uses multiplication, division, an exponent, addition, and subtraction that is equal to 100.25.

Hint: This is just to test your memory of the basic arithmetic commands, work backwards from 100.25

# Your answer is probably different
(60 + (10 ** 2) / 4 * 7) - 134.75
100.25
Answer these 3 questions without typing code. Then type code to check your answer.

What is the value of the expression 4 * (6 + 5)

What is the value of the expression 4 * 6 + 5 

What is the value of the expression 4 + 6 * 5 
4 * (6 + 5)
44
4 * 6 + 5 
29
4 + 6 * 5 
34
What is the type of the result of the expression 3 + 1.5 + 4?

Answer: Floating Point Number

What would you use to find a numberâ€™s square root, as well as its square?

# Square root:
100 ** 0.5
10.0
# Square:
10 ** 2
100
Strings
Given the string 'hello' give an index command that returns 'e'. Enter your code in the cell below:

s = 'hello'
# Print out 'e' using indexing

s[1]
'e'
Reverse the string 'hello' using slicing:

s ='hello'
# Reverse the string using slicing

s[::-1]
'olleh'
Given the string 'hello', give two methods of producing the letter 'o' using indexing.

s ='hello'
# Print out the 'o'

# Method 1:

s[-1]
'o'
# Method 2:

s[4]
'o'
Lists
Build this list [0,0,0] two separate ways.

# Method 1:
[0]*3
[0, 0, 0]
# Method 2:
list2 = [0,0,0]
list2
[0, 0, 0]
Reassign 'hello' in this nested list to say 'goodbye' instead:

list3 = [1,2,[3,4,'hello']]
list3[2][2] = 'goodbye'
list3
[1, 2, [3, 4, 'goodbye']]
Sort the list below:

list4 = [5,3,4,6,1]
# Method 1:
sorted(list4)
[1, 3, 4, 5, 6]
# Method 2:
list4.sort()
list4
[1, 3, 4, 5, 6]
Dictionaries
Using keys and indexing, grab the 'hello' from the following dictionaries:

d = {'simple_key':'hello'}
# Grab 'hello'

d['simple_key']
'hello'
d = {'k1':{'k2':'hello'}}
# Grab 'hello'

d['k1']['k2']
'hello'
# Getting a little tricker
d = {'k1':[{'nest_key':['this is deep',['hello']]}]}
# This was harder than I expected...
d['k1'][0]['nest_key'][1][0]
'hello'
# This will be hard and annoying!
d = {'k1':[1,2,{'k2':['this is tricky',{'tough':[1,2,['hello']]}]}]}
# Phew!
d['k1'][2]['k2'][1]['tough'][2][0]
'hello'
Can you sort a dictionary? Why or why not?

**Answer: No! Because normal dictionaries are mappings not a sequence. **

Tuples
What is the major difference between tuples and lists?

Tuples are immutable!

How do you create a tuple?

t = (1,2,3)
Sets
What is unique about a set?

Answer: They don't allow for duplicate items!

Use a set to find the unique values of the list below:

list5 = [1,2,2,33,4,4,11,22,3,3,2]
set(list5)
{1, 2, 3, 4, 11, 22, 33}
Booleans
For the following quiz questions, we will get a preview of comparison operators. In the table below, a=3 and b=4.

Operator	Description	Example
==	If the values of two operands are equal, then the condition becomes true.	(a == b) is not true.
!=	If values of two operands are not equal, then condition becomes true.	(a != b) is true.
>	If the value of left operand is greater than the value of right operand, then condition becomes true.	(a > b) is not true.
<	If the value of left operand is less than the value of right operand, then condition becomes true.	(a < b) is true.
>=	If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.	(a >= b) is not true.
<=	If the value of left operand is less than or equal to the value of right operand, then condition becomes true.	(a <= b) is true.
What will be the resulting Boolean of the following pieces of code (answer fist then check by typing it in!)

# Answer before running cell
2 > 3
False
# Answer before running cell
3 <= 2
False
# Answer before running cell
3 == 2.0
False
# Answer before running cell
3.0 == 3
True
# Answer before running cell
4**0.5 != 2
False
Final Question: What is the boolean output of the cell block below?

# two nested lists
l_one = [1,2,[3,4]]
l_two = [1,2,{'k1':4}]

# True or False?
l_one[2][0] >= l_two[2]['k1']
False
Great Job on your first assessment!

==============================================


Content Copyright by Pierian Data
Statements Assessment Solutions
Use for, .split(), and if to create a Statement that will print out words that start with 's':

st = 'Print only the words that start with s in this sentence'
for word in st.split():
    if word[0] == 's':
        print(word)
start
s
sentence
Use range() to print all the even numbers from 0 to 10.

list(range(0,11,2))
[0, 2, 4, 6, 8, 10]
Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.

[x for x in range(1,51) if x%3 == 0]
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48]
Go through the string below and if the length of a word is even print "even!"

st = 'Print every word in this sentence that has an even number of letters'
for word in st.split():
    if len(word)%2 == 0:
        print(word+" <-- has an even length!")
word <-- has an even length!
in <-- has an even length!
this <-- has an even length!
sentence <-- has an even length!
that <-- has an even length!
an <-- has an even length!
even <-- has an even length!
number <-- has an even length!
of <-- has an even length!
Write a program that prints the integers from 1 to 100. But for multiples of three print "Fizz" instead of the number, and for the multiples of five print "Buzz". For numbers which are multiples of both three and five print "FizzBuzz".

for num in range(1,101):
    if num % 3 == 0 and num % 5 == 0:
        print("FizzBuzz")
    elif num % 3 == 0:
        print("Fizz")
    elif num % 5 == 0:
        print("Buzz")
    else:
        print(num)
Use a List Comprehension to create a list of the first letters of every word in the string below:

st = 'Create a list of the first letters of every word in this string'
[word[0] for word in st.split()]
['C', 'a', 'l', 'o', 't', 'f', 'l', 'o', 'e', 'w', 'i', 't', 's']
Great Job!
==============================================


Content Copyright by Pierian Data
Guessing Game Challenge - Solution
Let's use while loops to create a guessing game.

The Challenge:

Write a program that picks a random integer from 1 to 100, and has players guess the number. The rules are:

If a player's guess is less than 1 or greater than 100, say "OUT OF BOUNDS"
On a player's first turn, if their guess is
within 10 of the number, return "WARM!"
further than 10 away from the number, return "COLD!"
On all subsequent turns, if a guess is
closer to the number than the previous guess return "WARMER!"
farther from the number than the previous guess, return "COLDER!"
When the player's guess equals the number, tell them they've guessed correctly and how many guesses it took!
First, pick a random integer from 1 to 100 using the random module and assign it to a variable
Note: random.randint(a,b) returns a random integer in range [a, b], including both end points.

import random

num = random.randint(1,100)
Next, print an introduction to the game and explain the rules
print("WELCOME TO GUESS ME!")
print("I'm thinking of a number between 1 and 100")
print("If your guess is more than 10 away from my number, I'll tell you you're COLD")
print("If your guess is within 10 of my number, I'll tell you you're WARM")
print("If your guess is farther than your most recent guess, I'll say you're getting COLDER")
print("If your guess is closer than your most recent guess, I'll say you're getting WARMER")
print("LET'S PLAY!")
WELCOME TO GUESS ME!
I'm thinking of a number between 1 and 100
If your guess is more than 10 away from my number, I'll tell you you're COLD
If your guess is within 10 of my number, I'll tell you you're WARM
If your guess is farther than your most recent guess, I'll say you're getting COLDER
If your guess is closer than your most recent guess, I'll say you're getting WARMER
LET'S PLAY!
Create a list to store guesses
Hint: zero is a good placeholder value. It's useful because it evaluates to "False"

guesses = [0]
Write a while loop that asks for a valid guess. Test it a few times to make sure it works.
while True:
    
    guess = int(input("I'm thinking of a number between 1 and 100.\n  What is your guess? "))
    
    if guess < 1 or guess > 100:
        print('OUT OF BOUNDS! Please try again: ')
        continue
        
    break
I'm thinking of a number between 1 and 100.
  What is your guess? 500
OUT OF BOUNDS! Please try again: 
I'm thinking of a number between 1 and 100.
  What is your guess? 50
Write a while loop that compares the player's guess to our number. If the player guesses correctly, break from the loop. Otherwise, tell the player if they're warmer or colder, and continue asking for guesses.
Some hints:

it may help to sketch out all possible combinations on paper first!
you can use the abs() function to find the positive difference between two numbers
if you append all new guesses to the list, then the previous guess is given as guesses[-2]
while True:

    # we can copy the code from above to take an input
    guess = int(input("I'm thinking of a number between 1 and 100.\n  What is your guess? "))
    
    if guess < 1 or guess > 100:
        print('OUT OF BOUNDS! Please try again: ')
        continue
    
    # here we compare the player's guess to our number
    if guess == num:
        print(f'CONGRATULATIONS, YOU GUESSED IT IN ONLY {len(guesses)} GUESSES!!')
        break
        
    # if guess is incorrect, add guess to the list
    guesses.append(guess)
    
    # when testing the first guess, guesses[-2]==0, which evaluates to False
    # and brings us down to the second section
    
    if guesses[-2]:  
        if abs(num-guess) < abs(num-guesses[-2]):
            print('WARMER!')
        else:
            print('COLDER!')
   
    else:
        if abs(num-guess) <= 10:
            print('WARM!')
        else:
            print('COLD!')
I'm thinking of a number between 1 and 100.
  What is your guess? 50
COLD!
I'm thinking of a number between 1 and 100.
  What is your guess? 75
WARMER!
I'm thinking of a number between 1 and 100.
  What is your guess? 85
WARMER!
I'm thinking of a number between 1 and 100.
  What is your guess? 92
COLDER!
I'm thinking of a number between 1 and 100.
  What is your guess? 80
WARMER!
I'm thinking of a number between 1 and 100.
  What is your guess? 78
COLDER!
I'm thinking of a number between 1 and 100.
  What is your guess? 82
WARMER!
I'm thinking of a number between 1 and 100.
  What is your guess? 83
COLDER!
I'm thinking of a number between 1 and 100.
  What is your guess? 81
CONGRATULATIONS, YOU GUESSED IT IN ONLY 9 GUESSES!!
That's it! You've just programmed your first game!

In the next section we'll learn how to turn some of these repetitive actions into functions that can be called whenever we need them.

Good Job!


