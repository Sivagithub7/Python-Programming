i=1
while i<=5:
    print("nikil",end=" ")
    j=1
    while j<=5:
        print("idiot",end=" ")
        j+=1
    print()
    i+=1

o/p:

nikil idiot idiot idiot idiot idiot 
nikil idiot idiot idiot idiot idiot 
nikil idiot idiot idiot idiot idiot 
nikil idiot idiot idiot idiot idiot 
nikil idiot idiot idiot idiot idiot
================================

x=int(input("Enter min num: "))
y=int(input("Enter max num: "))
i=x
while i<=y:
    print(i)
    i+=2

o/p:

Enter min num: 1
Enter max num: 10
1
3
5
7
9
-----------------------------------




while:A while loop is a control flow statement which allows code to be executed repeatedly, depending on whether a condition is satisfied or not.

ex:
mystring = 'sammy'

for letter in mystring:
    print(letter)
s
a
m
m
y
---------------------------
continue:
mystring = 'sammy'

for letter in mystring:
    if letter=='a':
        continue
    print(letter)
s
m
m
y
--------------------------
break:
x = 0

while x < 5:
    if x==2:
        break
    print(x)
    x=x+1
o/p:
0
1
-----------------------

ex:
c=1
while c<6:
    print(c ,"hello")
    c+=1

o/p:
1 hello
2 hello
3 hello
4 hello
5 hello

ex:

c=1
while c<6:
    print(c ,"hello")
    if c==3:
        print("now is 3")
        
    c+=1
o/p:
1 hello
2 hello
3 hello
now is 3
4 hello
5 hello


ex:break

c=1
while c<6:
    print(c ,"hello")
    if c==3:
        print("now is 3")
        break
    c+=1
o/p:

ex:continue

c=0
while c<6:
    c += 1
    if c == 3:
        print("now is 3")
        continue
    print(c ,"hello")

o/p:
1 hello
2 hello
now is 3
4 hello
5 hello
6 hello
==========================


Content Copyright by Pierian Data
while Loops
The while statement in Python is one of most general ways to perform iteration. A while statement will repeatedly execute a single statement or group of statements as long as the condition is true. The reason it is called a 'loop' is because the code statements are looped through over and over again until the condition is no longer met.

The general format of a while loop is:

while test:
    code statements
else:
    final code statements
Let’s look at a few simple while loops in action.

x = 0

while x < 10:
    print('x is currently: ',x)
    print(' x is still less than 10, adding 1 to x')
    x+=1
x is currently:  0
 x is still less than 10, adding 1 to x
x is currently:  1
 x is still less than 10, adding 1 to x
x is currently:  2
 x is still less than 10, adding 1 to x
x is currently:  3
 x is still less than 10, adding 1 to x
x is currently:  4
 x is still less than 10, adding 1 to x
x is currently:  5
 x is still less than 10, adding 1 to x
x is currently:  6
 x is still less than 10, adding 1 to x
x is currently:  7
 x is still less than 10, adding 1 to x
x is currently:  8
 x is still less than 10, adding 1 to x
x is currently:  9
 x is still less than 10, adding 1 to x
Notice how many times the print statements occurred and how the while loop kept going until the True condition was met, which occurred once x==10. It's important to note that once this occurred the code stopped. Let's see how we could add an else statement:

x = 0

while x < 10:
    print('x is currently: ',x)
    print(' x is still less than 10, adding 1 to x')
    x+=1
    
else:
    print('All Done!')
x is currently:  0
 x is still less than 10, adding 1 to x
x is currently:  1
 x is still less than 10, adding 1 to x
x is currently:  2
 x is still less than 10, adding 1 to x
x is currently:  3
 x is still less than 10, adding 1 to x
x is currently:  4
 x is still less than 10, adding 1 to x
x is currently:  5
 x is still less than 10, adding 1 to x
x is currently:  6
 x is still less than 10, adding 1 to x
x is currently:  7
 x is still less than 10, adding 1 to x
x is currently:  8
 x is still less than 10, adding 1 to x
x is currently:  9
 x is still less than 10, adding 1 to x
All Done!
break, continue, pass
We can use break, continue, and pass statements in our loops to add additional functionality for various cases. The three statements are defined by:

break: Breaks out of the current closest enclosing loop.
continue: Goes to the top of the closest enclosing loop.
pass: Does nothing at all.
Thinking about break and continue statements, the general format of the while loop looks like this:

while test: 
    code statement
    if test: 
        break
    if test: 
        continue 
else:
break and continue statements can appear anywhere inside the loop’s body, but we will usually put them further nested in conjunction with an if statement to perform an action based on some condition.

Let's go ahead and look at some examples!

x = 0

while x < 10:
    print('x is currently: ',x)
    print(' x is still less than 10, adding 1 to x')
    x+=1
    if x==3:
        print('x==3')
    else:
        print('continuing...')
        continue
x is currently:  0
 x is still less than 10, adding 1 to x
continuing...
x is currently:  1
 x is still less than 10, adding 1 to x
continuing...
x is currently:  2
 x is still less than 10, adding 1 to x
x==3
x is currently:  3
 x is still less than 10, adding 1 to x
continuing...
x is currently:  4
 x is still less than 10, adding 1 to x
continuing...
x is currently:  5
 x is still less than 10, adding 1 to x
continuing...
x is currently:  6
 x is still less than 10, adding 1 to x
continuing...
x is currently:  7
 x is still less than 10, adding 1 to x
continuing...
x is currently:  8
 x is still less than 10, adding 1 to x
continuing...
x is currently:  9
 x is still less than 10, adding 1 to x
continuing...
Note how we have a printed statement when x==3, and a continue being printed out as we continue through the outer while loop. Let's put in a break once x ==3 and see if the result makes sense:

x = 0

while x < 10:
    print('x is currently: ',x)
    print(' x is still less than 10, adding 1 to x')
    x+=1
    if x==3:
        print('Breaking because x==3')
        break
    else:
        print('continuing...')
        continue
x is currently:  0
 x is still less than 10, adding 1 to x
continuing...
x is currently:  1
 x is still less than 10, adding 1 to x
continuing...
x is currently:  2
 x is still less than 10, adding 1 to x
Breaking because x==3
Note how the other else statement wasn't reached and continuing was never printed!

After these brief but simple examples, you should feel comfortable using while statements in your code.

A word of caution however! It is possible to create an infinitely running loop with while statements. For example:

# DO NOT RUN THIS CODE!!!! 
while True:
    print("I'm stuck in an infinite loop!")
A quick note: If you did run the above cell, click on the Kernel menu above to restart the kernel!
=========================================

while:A while loop is a control flow statement which allows code to be executed repeatedly, depending on whether a condition is satisfied or not.

ex:
c=1
while c<6:
    print(c ,"hello")
    c+=1

o/p:
1 hello
2 hello
3 hello
4 hello
5 hello

ex:

c=1
while c<6:
    print(c ,"hello")
    if c==3:
        print("now is 3")
        
    c+=1
o/p:
1 hello
2 hello
3 hello
now is 3
4 hello
5 hello


ex:break

c=1
while c<6:
    print(c ,"hello")
    if c==3:
        print("now is 3")
        break
    c+=1
o/p:

ex:continue

c=0
while c<6:
    c += 1
    if c == 3:
        print("now is 3")
        continue
    print(c ,"hello")

o/p:
1 hello
2 hello
now is 3
4 hello
5 hello
6 hello

-------------------------------------------
For:A for loop in Python is a control flow statement that is used to repeatedly execute a group of statements as long as the condition is satisfied.

ex:
for x in range(1, 6):
    print(x)

o/p:
1
2
3
4
5

ex:

for x in range(1, 30, 5):
    print(x)
	
o/p:
1
6
11
16
21
26

ex:
persons = ('ram','raj','sam','vinay')
for user in persons:
    print(user)
	
o/p:
ram
raj
sam
vinay

ex: we also used sets (unordered)

persons = {'ram','raj','sam','vinay'}
for user in persons:
    print(user)
	
o/p:
ram
sam
raj
vinay

o/p:
sam
raj
ram
vinay

ex:

name=('rafi')
for i in name:
    print(i)
	
o/p:
r
a
f
i

ex:

name=('rafi','sam','raj','vinay','ravi')
for i in name:
    print(i)
    if i=='raj':
        break
o/p:
rafi
sam
raj

ex:
name=('rafi','sam','raj','vinay','ravi')
for i in name:
    
    if i=='raj':
        break
    print(i)
	
o/p:
sam
raj

ex: using else
name=('rafi','sam','raj','vinay','ravi')
for i in name:
    print(i)
else:
    print("hai")
	
o/p:
afi
sam
raj
vinay
ravi
hai

ex:

name=('rafi','sam','raj','vinay','ravi')
for i in name:
    print(i)
    if i=="raj":
        break
else:
    print("hai")

o/p:
rafi
sam
raj
